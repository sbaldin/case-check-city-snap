 diff --git a/src/citysnap/app/schemas/building.py b/src/citysnap/app/schemas/building.py
  @@
   class BuildingInfo(BaseModel):
       name: Optional[str] = None
       year_built: Optional[int] = None
       architect: Optional[str] = None
       location: Optional[Coordinates] = None
       history: Optional[str] = None
  +    image_path: Optional[str] = None
  diff --git a/src/citysnap/app/routers/buildings.py b/src/citysnap/app/routers/buildings.py
  @@
  -from fastapi import APIRouter, Depends, HTTPException
  +import base64
  +import binascii
  +import os
  +from datetime import datetime
  +from pathlib import Path
  +
  +from fastapi import APIRouter, Depends, HTTPException
  @@
  -router = APIRouter(prefix="/api/v1", tags=["buildings"])
  +router = APIRouter(prefix="/api/v1", tags=["buildings"])
  +
  +_UPLOAD_DIR_ENV = "CITYSNAP_UPLOAD_DIR"
  +_DEFAULT_UPLOAD_DIR = "uploads"
  +_DEFAULT_IMAGE_EXTENSION = "jpg"
  +_MIME_EXTENSION_MAP = {
  +    "image/jpeg": "jpg",
  +    "image/png": "png",
  +    "image/webp": "webp",
  +}
  +
  +
  +def _decode_image(image_base64: str) -> tuple[bytes, str]:
  +    """Decode base64 payload; return image bytes and an extension hint."""
  +    encoded = image_base64.strip()
  +    extension = _DEFAULT_IMAGE_EXTENSION
  +
  +    if encoded.startswith("data:"):
  +        header, _, encoded = encoded.partition(",")
  +        if not encoded:
  +            raise ValueError("missing base64 payload")
  +        mime = header.split(";")[0].split(":")[-1]
  +        extension = _MIME_EXTENSION_MAP.get(mime, _DEFAULT_IMAGE_EXTENSION)
  +
  +    try:
  +        return base64.b64decode(encoded, validate=True), extension
  +    except (binascii.Error, ValueError) as exc:
  +        raise ValueError("invalid base64 data") from exc
  +
  +
  +def _persist_image(
  +    *,
  +    image_bytes: bytes,
  +    extension: str,
  +    building_id: int | None,
  +    coordinates: Coordinates | None,
  +) -> str:
  +    """Store decoded image bytes under uploads directory."""
  +    upload_dir = Path(os.getenv(_UPLOAD_DIR_ENV, _DEFAULT_UPLOAD_DIR))
  +
  +    try:
  +        upload_dir.mkdir(parents=True, exist_ok=True)
  +    except OSError as exc:
  +        raise HTTPException(
  +            status_code=500,
  +            detail="OpenStreetMap gateway cannot prepare the uploads directory",
  +        ) from exc
  +
  +    timestamp = datetime.utcnow().strftime("%Y%m%d%H%M%S%f")
  +    parts: list[str] = []
  +    if building_id is not None:
  +        parts.append(f"osm-{building_id}")
  +    if coordinates is not None:
  +        parts.append(f"{coordinates.lat:.6f}-{coordinates.lon:.6f}")
  +    if not parts:
  +        parts.append("osm")
  +
  +    filename = f"{'_'.join(parts)}_{timestamp}.{extension}"
  +    path = upload_dir / filename
  +
  +    try:
  +        path.write_bytes(image_bytes)
  +    except OSError as exc:
  +        raise HTTPException(
  +            status_code=500,
  +            detail="OpenStreetMap gateway failed to store the uploaded photo",
  +        ) from exc
  +
  +    return str(path.resolve())
  @@
  -    if not payload.address and payload.coordinates is None:
  +    if not payload.address and payload.coordinates is None:
           raise HTTPException(
               status_code=400,
  -            detail="Either address or coordinates must be provided",
  +            detail="OpenStreetMap gateway requires either an address or coordinates to query OpenStreetMap APIs",
           )

       sources: list[str] = []

       geocode_result = None
       geocode_source: str | None = None
  +    decoded_image: tuple[bytes, str] | None = None
  +
  +    if payload.image_base64:
  +        try:
  +            decoded_image = _decode_image(payload.image_base64)
  +        except ValueError as exc:
  +            raise HTTPException(
  +                status_code=400,
  +                detail="OpenStreetMap gateway cannot decode the provided base64 photo",
  +            ) from exc
  @@
  -    try:
  -        coordinates: Coordinates = geocode_result.coordinates
  -        building_id = geocode_result.building_id
  +    try:
  +        coordinates: Coordinates = geocode_result.coordinates
  +        osm_building_id = geocode_result.building_id.osm_id
       except AttributeError as exc:  # pragma: no cover - defensive
           raise HTTPException(status_code=502, detail="OpenStreetMap Nominatim returned an unexpected payload") from exc

       if geocode_source:
           sources.append(geocode_source)

       try:
  -        building = await building_data_service.fetch(building_id=building_id.osm_id)
  +        building = await building_data_service.fetch(building_id=osm_building_id)
       except AgentServiceError as exc:
           raise HTTPException(status_code=502, detail=f"OpenStreetMap API failed to provide building data: {exc}") from exc

       if building:
           # make sure coordinates discovered from geocoding are included
           if coordinates and not building.location:
               building = building.model_copy(update={"location": coordinates})
           sources.append("OpenStreetMap API")
       else:
           building = BuildingInfo(location=coordinates)

  +    if decoded_image is not None:
  +        stored_image_path = _persist_image(
  +            image_bytes=decoded_image[0],
  +            extension=decoded_image[1],
  +            building_id=osm_building_id,
  +            coordinates=coordinates,
  +        )
  +        building = building.model_copy(update={"image_path": stored_image_path})
  +
       if not sources:
           sources.append("Gateway Stub")

       return BuildingInfoResponse(building=building, source=sources)
  diff --git a/src/citysnap/app/services/geocoding.py b/src/citysnap/app/services/geocoding.py
  @@
  -            raise AgentServiceError("Geocoding request rejected", upstream_status=status_code) from exc
  +            raise AgentServiceError("OpenStreetMap Nominatim rejected the request", upstream_status=status_code) from exc
  @@
  -            raise AgentServiceError("Failed to call geocoding service") from exc
  +            raise AgentServiceError("Failed to call OpenStreetMap Nominatim API") from exc
  @@
  -            raise AgentServiceError("Geocoding service returned invalid JSON") from exc
  +            raise AgentServiceError("OpenStreetMap Nominatim returned invalid JSON") from exc
  @@
  -            raise AgentServiceError("Geocoding service returned malformed coordinates") from exc
  +            raise AgentServiceError("OpenStreetMap Nominatim returned malformed coordinates") from exc
  @@
  -            raise AgentServiceError("Geocoding request rejected", upstream_status=status_code) from exc
  +            raise AgentServiceError("OpenStreetMap Nominatim rejected the request", upstream_status=status_code) from exc
  @@
  -            raise AgentServiceError("Failed to call geocoding service") from exc
  +            raise AgentServiceError("Failed to call OpenStreetMap Nominatim API") from exc
  @@
  -            raise AgentServiceError("Geocoding service returned invalid JSON") from exc
  +            raise AgentServiceError("OpenStreetMap Nominatim returned invalid JSON") from exc
  @@
  -            raise AgentServiceError("Geocoding service returned malformed coordinates") from exc
  +            raise AgentServiceError("OpenStreetMap Nominatim returned malformed coordinates") from exc
  @@
  -        return CoordinatesAndBuildingId(
  -            coordinates=Coordinates(lat=latitude, lon=longitude),
  -            building_id= BuildingId(osm_id=osm_id)
  -        )
  +        return CoordinatesAndBuildingId(
  +            coordinates=Coordinates(lat=latitude, lon=longitude),
  +            building_id=BuildingId(osm_id=osm_id),
  +        )
  diff --git a/src/citysnap/app/services/building_data.py b/src/citysnap/app/services/building_data.py
  @@
  -            raise AgentServiceError("Building data request rejected", upstream_status=status_code) from exc
  +            raise AgentServiceError("OpenStreetMap building data API rejected the request", upstream_status=status_code) from exc
  @@
  -            raise AgentServiceError("Failed to call building data service") from exc
  +            raise AgentServiceError("Failed to call OpenStreetMap building data API") from exc
  @@
  -            raise AgentServiceError("Building data service returned invalid JSON") from exc
  +            raise AgentServiceError("OpenStreetMap building data API returned invalid JSON") from exc
  @@
  -            raise AgentServiceError("Building data service returned an unexpected payload")
  +            raise AgentServiceError("OpenStreetMap building data API returned an unexpected payload")
  @@
  -            raise AgentServiceError("Building data service returned an unexpected payload")
  +            raise AgentServiceError("OpenStreetMap building data API returned an unexpected payload")
  @@
  -        raise AgentServiceError("Building not found in building data service response")
  +        raise AgentServiceError("Building not found in OpenStreetMap building data API response")
  @@
  -                #make sure that year is a number
  +                # Make sure that year is a number
  diff --git a/tests/citysnap/app/routers/test_buildings.py b/tests/citysnap/app/routers/test_buildings.py
  @@
  -import pytest
  +import base64
  +from pathlib import Path
  +
  +import pytest
  @@
       assert payload["building"]["name"] == "Test Building"
       assert payload["building"]["location"] == {"lat": 59.935, "lon": 30.325}
       assert geocoding_service.geocode_calls == []
       assert len(geocoding_service.reverse_calls) == 1
       assert building_service.fetch_calls == [777]
  +
  +
  +def test_building_info_saves_base64_image(tmp_path, monkeypatch, client):
  +    test_client, geocoding_service, building_service = client
  +    monkeypatch.setenv("CITYSNAP_UPLOAD_DIR", str(tmp_path))
  +
  +    encoded_image = base64.b64encode(b"sample-image").decode("ascii")
  +
  +    response = test_client.post(
  +        "/api/v1/building/info",
  +        json={
  +            "coordinates": {"lat": 59.935, "lon": 30.325},
  +            "image_base64": encoded_image,
  +        },
  +    )
  +
  +    assert response.status_code == 200
  +    payload = response.json()
  +    image_path = Path(payload["building"]["image_path"])
  +    assert image_path.exists()
  +    assert image_path.read_bytes() == b"sample-image"
  +    assert building_service.fetch_calls == [777]
